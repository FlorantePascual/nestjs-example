$ npm i -g @nestjs/cli

Create project:
$ nest new project-name

Create project from boilerplate:
$ git clone https://github.com/nestjs/typescript-starter.git the-project
$ cd the-project
$ npm install
$ npm run start

SCHEMATICS
nest g --help // show all schemactics

MODULES - For organizing stuff
nest g module tasks // create tasks module

CONTROLLERS - responsible for handling incoming requests and returning responses
 - bound to a specific path
 - contain handlers which handle endpoints (path) and request methods (GET, POST, DELETE etc)
 - can use DI for consuming services

 nest g controller tasks --no-spec

PROVIDERS - can be injected into constructors if decorated as @Injectable
 - can be a plain value, class, sync/async factory
 - must be PROVIDED to a module for them to be usable

SERVICES 
 - services are implemented using providers
 - not all providers are services
 - Singleton using @Injectable

nest g service tasks --no-spec

DTO - Data Transfer Object
 - an object that defines how data will flow in the network
 - can be an interface or class (Class recommended)

https://github.com/arielweinberger/nestjs-course-task-management/tree/s1-task-management-app
